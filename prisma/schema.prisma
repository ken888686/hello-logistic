generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  NEW
  CONFIRMED
  SHIPPING
  PENDING
  CANCELED
}

// User
model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique @db.VarChar(255)
  password       String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  display_name   String?  @db.VarChar(255)
  first_name     String?  @db.VarChar(255)
  last_name      String?  @db.VarChar(255)
  photo_url      String?  @db.VarChar(255)
  email_verified Boolean  @default(false)
  enabled        Boolean  @default(true)
  role           Role     @default(USER)
  created_at     DateTime @default(now()) @db.Timestamptz
  updated_at     DateTime @updatedAt @db.Timestamptz

  userAddress     UserAddress[]
  userPayment     UserPayment[]
  shoppingSession ShoppingSession?
  orderDetails    OrderDetails?
}

model UserAddress {
  id            Int     @id @default(autoincrement())
  user_id       Int
  address_line1 String? @db.VarChar(255)
  address_line2 String? @db.VarChar(255)
  city          String  @db.VarChar(255)
  postal_code   String  @db.VarChar(255)
  country       String  @db.VarChar(255)
  telephone     String  @db.VarChar(255)
  mobile        String  @db.VarChar(255)

  user User @relation(fields: [user_id], references: [id])
}

model UserPayment {
  id           Int     @id @default(autoincrement())
  user_id      Int
  payment_type String? @db.VarChar(255)
  provider     String? @db.VarChar(255)
  account_no   String? @db.VarChar(255)
  expiry_date  String? @db.VarChar(255)

  user User @relation(fields: [user_id], references: [id])
}

// Product
model Product {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(255)
  description  String?  @db.Text
  SKU          String   @db.VarChar(255)
  category_id  Int
  inventory_id Int      @unique
  price        Decimal  @db.Decimal(25, 0)
  discount_id  Int?
  created_at   DateTime @default(now()) @db.Timestamptz
  updated_at   DateTime @updatedAt @db.Timestamptz

  productCategory  ProductCategory  @relation(fields: [category_id], references: [id])
  productInventory ProductInventory @relation(fields: [inventory_id], references: [id])
  productDiscount  ProductDiscount? @relation(fields: [discount_id], references: [id])
  cartItem         CartItem?
  orderItems       OrderItems?
}

model ProductCategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz
  updated_at  DateTime @updatedAt @db.Timestamptz

  product Product[]
}

model ProductInventory {
  id         Int      @id @default(autoincrement())
  quantity   Int      @default(0) @db.Integer
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  product Product?
}

model ProductDiscount {
  id                  Int      @id @default(autoincrement())
  name                String   @db.VarChar(255)
  description         String?  @db.Text
  discount_percentage Decimal  @default(0) @db.Decimal
  active              Boolean  @default(false) @db.Boolean
  created_at          DateTime @default(now()) @db.Timestamptz
  updated_at          DateTime @updatedAt @db.Timestamptz

  product Product[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  session_id Int      @unique
  product_id Int      @unique
  quantity   Int      @default(1)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  product         Product         @relation(fields: [product_id], references: [id])
  shoppingSession ShoppingSession @relation(fields: [session_id], references: [id])
}

model ShoppingSession {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  total      Decimal
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  cartItem CartItem?
  user     User      @relation(fields: [user_id], references: [id])
}

model OrderItems {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int      @unique
  quantity   Int      @default(1)
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  orderDetails OrderDetails @relation(fields: [order_id], references: [id])
  product      Product      @relation(fields: [product_id], references: [id])
}

model OrderDetails {
  id         Int         @id @default(autoincrement())
  user_id    Int         @unique
  status     OrderStatus @default(NEW)
  total      Int         @default(1)
  payment_id Int         @unique
  created_at DateTime    @default(now()) @db.Timestamptz
  updated_at DateTime    @updatedAt @db.Timestamptz

  orderItems    OrderItems[]
  user          User          @relation(fields: [user_id], references: [id])
  paymentDetail PaymentDetail @relation(fields: [payment_id], references: [id])
}

model PaymentDetail {
  id         Int      @id @default(autoincrement())
  order_id   Int
  amount     Int
  provider   String
  status     String
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  OrderDetails OrderDetails?
}
